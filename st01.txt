cs50.ai
사이트는 누가나 사용이 가능한가?

128 64 32 16 8 4 2 1
 0   0  0  0 0 0 0 0
ASCII 값을 계산하는 방법 하는 비트에 1로 이루어진 경우 해당하는 비트값을 더하여 
ASCII 값을 확인 할 수 있음
ASCII표를 확인하는 해당하는 숫자에 문자 및 기호를 확인 할 수 있음

한글에 ASCII 값은 어떻게 계산하는가?
ASCII코드로 설정된 부분이 아니라 unicode값이로 매칭된 문자를 출력
2바이트 사용(16진수)

Scratch
scratch.mit.edu 사이트
input -> algorithnm -> output
프로그래밍을 쉽게 접근하고 사용자 친화적

프로그래밍 언어를 어떻게 해서 컴퓨터에서는 해석하는건가?
소스를 변환해주는 기계적은 방법을 무엇이라고 하는가?
source code -> compiler(기계어로 변환) -> machine code

cs50.dev 사이트 무료로 사용가능 (github 사용자)

vscode 
그래픽컬 유저 인터페이지(아이콘, 메, 버튼 등등,GUI)
vscode 터미널
개념적으로 command line interface
명령어 인터페이스(CLI)
make, clang -> 코드의 컴파일을 트리거
clang -o hello hello.c -> hello.c 파일을 clang 명령어 인수자 -o를 넣어서 hello라는 컴파일 파일을 만듬

강의에서 hello로 make를 했는데 실행시에는 ./hello로 실행을 하는 이유는 무언인가?
./ -> 경로는 지정하는 부분이라서 실제 hello라는 make로 만들어 파일이 어는 위치에 있는
확인하고 그 위에 파일이 있으면 실행 없으면 실행이 되지 않는다.
왜 ./hello로 실행을 해야 하는가?
컴파일러가 해당하는 소스코드를 기계어로 변환을 해야 사용이 가능 하기 때문
왜 ./hello.c를 실행하지 않는가?
c언어는 컴파일을 사용하여 기계어를 변환을 해야 하므로 소스코드를 바로 사용을 하면
오류를 발생하며 실행도 되지 않는데 
컴파일을 사용하지 않는 언어는 해당 언어에 가상컴파일러 포함이 되어 있어서 자동으로 컴파일을
진행하고 실행을 한다

.h(표준 io.h)로 끝나는 모든 파일은 소스가 아닙니다(헤더파일)
소스코드 상단에 헤더파일이 없으면 오류 발생
소스코드 상단에 있는거는 일종에 도서관이라고 생각하며 이는 라이브러리(libraries)함

libraries(라이브러리) 다른 사람이 작성한 코드 모음

manual.cs50.io 사이트 C에서 사용하는 함수를 확인할 수 있음
해당하는 사이트에는 표준 io.h에 사용된 라이브러리를 확인 및 관련 내용 설명도 제공

cs50 강의에서 사용하는 cs50.h 헤더파일은 어떻게 사용할 수 있는건가?
정확히는 헤더파일을 설치가 필요한 부분인가?

C, C++, java 
counter =  counter + 1; -> counter += 1; -> counter++;
1씩 증가하는 방법 세가지


C 강의
compare.c 내용중에 int x = get_int("내용") 여기에서 int로 타입을 선언을 했는데 
하고 get_int 라이브러리를 사용하였는데 int로 타입을 선언을 하면 숫자로 인식을 해야 하는거 
아닌가? 그럼 실행 시 오류가 나와야 하는건 아닌지?
get_int 이라는 라이브러리에 input 으로 등록하는 부분이 있으면 등록된 부분에 숫자를 
입력을 하면 x = 숫자로 지정이 되기 때문에 해당하는 부분에서는 오류가 발생하지 않는다.


프로그래밍을 중요성 3가지
정확성, 디자인(프로그래밍의 코드를 더 잘 구성할 수 있는지), 스타일(보기 편하게)
check50, desing50, style50

constants
cont i = 9;
고정된 값으로 지정이 됨
i값을 다시 지정을 해도 컴파일러가 변경을 허용하지 않음


overflow
지정된 메모니를 넣어가면 그 부분부터 음수로 갔다가 0으로 지정됨

truncation
소주점는 모두 짜른다 -> 값에 타입을 float로 변경하면 소수점이 처리됨

int, float 32비트 메모리를 사용 더 많은 숫자를 사용할려면 long, double float를 사용

preprocessing -> 소스에서 사용하는 라이브러리나 프로토타입을 전처리함 
compiling -> 소스코드를 읽을 수 있도록 변환
assembling -> 변환된 소스코드를 기계어로 처리 
linking -> 소스코드에 있는 전처리파일과 코드작성 파일을 하나로 연결


string 타입은 실제 메모리에는 문자길이+1로 지정이 된다.
마지막를 나타내는 부분은 0으로 처리한다
0부분으로 처리되는 부분은 NUL이라고 하고 문자에 종료를 의미한다
manual.cs50.io/#string.h 메뉴얼에서 문자열에 대한 함수들을 확인할 수 있다

대소문자 변환에서 문자열을 연산할 수 있는 이유는?
지정된 문자열에 ASCII 값으로 컴퓨터는 처리 하기 때문에 문자열에 마이너스 연산이 가능하기 처리된다

int main(int argc(#인수갯수), string argv[](#인수 갯수 배열))

선택정렬, 버블정렬 알고리즘? 더욱 디테일한 설명이 필요

재귀 알고리즘 
자기 자신을 호출하는 것(재귀 함수)

병렬정렬
데이터를 반으로 나누거 왼쪽 오른쪽 
왼쪽 데이터를 다시 반으로 나누고 왼쪽 정렬
나머지 오른쪽 데이터 정렬
왼쪽, 오른쪽 정렬된 데이터를 다시 합치고 정렬

malloc?
node?

Hexadecimal(16진수)
0 1 2 3 4 5 6 7 8 9 A B C D E F로 정의 두자리 숫자는 문자로 정의(A B C D E F)
00 값이 01, 02, 03... 으로 계속 올라가면 가장 마지막 값을 FF가 되며 
이 00 ~ FF 까지 값을 0 ~ 255로 됨
00 -> 4비트, 0000 -> 8비트, 0000 0000 -> 16비트
0x0, 0x1, 0x2... 0xF -> 중간에 x를 넣어서 메모리에 바이트 상자를 표현한다
pointer(포인터) -> 무언가의 주소를 저장하는 변수

FIFO
queues -> 대기줄
enqueue -> 대기열에 넣는다
dequeue -> 대기열에서 꺼낸다

LIFO
push -> 스택 맨 위에 무언가를 푸시하는 작업
pop -> 스택 맨 위에서 무언가를 제거하는 작업

linked lists -> 컴퓨터 메모리에 있는 것들을 연결하기 위해 포인터를 사용하는 리스트

trees
-> 매우 흔한 데이터 구조, 2차원 배열 구조

binary search trees
-> 이진 탐색 트리
-> 이전 탐색을 수행하고 실행 시간에 n의 로그 밑 2를 달성할 수 있다고 하더라도
실제로 균형을 유지하도록 보장하기 위해 어느 정도 노력을 기울여야 한다는 것

2차원 배열 트리
-> 유연성과 역동성을 얻었음에도 불구하고 연결 리스트에서 이진 검색을 수행할 수 없는
이유는 거꾸로 돌아갈 수 없는 긴 문자열 형태의 데이터 구조가 있기 때문에

dictionaries(디셕러니)
-> 목록, 배열 트리를 넘어 코드에서 단어와 정의를 연관시키는 기능까지 갖춘 놀라울 정도
유용한 데이터 구조
-> key, value를 연결하여 사용하는 구조

hashing
-> hash function(해시함수) 어떤 값이 메모리의 어디에 위치하는지 결정할 수 있게 해줌
-> 어떤 값을 입력 받아서 다른 값을 출력 받음 이런 작업을 하는 수학이나 코드임

hash tables
-> 입력과 출력으로 생성하는 코드나 수학 함수를 사용하면 hash tables를 만들 수 있음

tries
-> 데이터를 검색하기 위한 데이터 구조
-> key-value 쌍을 구현할 수 있는 대체 데이터 구조
-> 배열, 연결 리스트, 해시테이블, 트라이로 사전을 구현할 수 있습니다.

python 
-> docs.python.org
-> 매개변수(define)로 정의된 것은 함수를 실행하는 부분이 존재하여야 한다
-> isnumeric() 숫자여부를 확인하는 내장함수

API(애플리케이션 프로그래밍 인터페이지)


프롬프트 엔지니어링(system prompt)
-> 어딘가의 누군가가 AI를 위해 시스템 프롬프트를 작성했다는 것을 의미

cs50.edx.org
수업강의 사이트



9월 30일일
pccp 코딩 테스트 연습문제
https://school.programmers.co.kr/learn/courses/30/lessons/181950?language=python3

### 현재 방식을 완성하기 위해 필요한 공부

#### **핵심 학습 포인트: `str.join()` 메소드**
join() 은 문자열 메소드로, 리스트나 튜플 같은 반복 가능한(iterable) 객체의 요소들을 하나의 문자열로 합쳐주는 메소드

'''python
my_list = ['hello', 'hello', 'hello']
result = "".join(my_list)
print(result)
# 출력: "hellohellohello"
'''

### 더 효율적이고 "파이썬스러운" 방법

#### **핵심 학습 포인트: 문자열 곱셈 연산자 (`*`)**
파이썬에서는 문자열에 정수를 곱할 수 있습니다. 이는 해당 문자열을 정수만큼 반복하는 효과를 가집니다.

'''python
str = "abc"
n = 3
result = str * n
print(result)
# 출력: "abcabcabc"
'''

1.  **파이썬 기본 자료형(Data Types) 특징 완벽히 이해하기**
    *   **문자열(String):** 문자열끼리 더하기(`+`), 곱하기(`*`)가 가능하다는 특징을 학습하세요.
    *   **리스트(List):** 여러 데이터를 담는 '그릇'이라는 점, `append()`로 요소를 추가하는 방법 등을 복습하세요.
    *   **자료형 변환:** `int()`처럼 문자열을 숫자로 바꾸거나, 리스트를 문자열로 바꾸는(`join`) 등의 변환 방법을 익히는 것이 중요합니다.

2.  **문자열 메소드(String Methods) 깊게 파고들기**
    *   **`join()`:** 리스트를 문자열로 합칠 때 필수적이고 매우 효율적인 방법입니다.
    *   **`split()`:** 이미 사용하셨지만, 특정 문자를 기준으로 문자열을 나누어 리스트로 만드는 강력한 도구입니다.
    *   **`strip()`:** 양쪽 공백 제거, `lstrip()`, `rstrip()` 등 파생 메소드도 함께 알아두면 좋습니다.
    *   `replace()`, `find()`, `upper()`, `lower()` 등 다른 유용한 문자열 메소드도 많으니 꼭 살펴보세요.

3.  **"파이썬스러운 코드(Pythonic Code)" 작성법 익히기**
    *   파이썬은 다른 언어에 비해 간결하고 직관적인 문법을 많이 제공합니다.
    *   문자열 곱셈(`*`)이나, 나중에 배우게 될 **리스트 컴프리헨션(List Comprehension)** 같은 기능들을 익히면 코드가 짧아지고 가독성이 높아집니다.
    *   단순히 동작하는 코드를 넘어, "어떻게 하면 더 효율적이고 보기 좋게 짤 수 있을까?"를 항상 고민하는 습관을 들이면 실력이 빠르게 향상될 것입니다.

'''python
str, n = input().strip().split(' ')
n = int(n)
su = len(str)
answer = 0
s = str
if 1 <= su <= 10 and 1 <= n <= 5:
        answer = [s for _ in range(n)]
        answer = ''.join(answer)
else:
    answer = '최대값을 넘었습니다.'

print(answer)
'''



https://school.programmers.co.kr/learn/courses/30/lessons/181949?language=python3
### 핵심 학습 포인트 (이것만 알면 됩니다!)

1.  **문자열 순회 (Iteration)**: 문자열에 포함된 각 문자를 하나씩 처음부터 끝까지 살펴보는 방법.
2.  **조건문 (Conditional Statement)**: 특정 조건(예: '이 문자가 대문자인가?')에 따라 다른 코드를 실행하는 방법.
3.  **대소문자 판별 함수**: 현재 문자가 대문자인지 소문자인지 확인하는 기능.
4.  **대소문자 변환 함수**: 문자를 대문자에서 소문자로, 또는 소문자에서 대문자로 바꾸는 기능.

---

### 1. 문자열 순회 (하나씩 꺼내보기)

문자열 `str`이 "aBcDe" 라면, 'a', 'B', 'c', 'D', 'e'를 하나씩 차례대로 꺼내서 작업을 해야 합니다. 이때 `for` 반복문이 가장 흔하게 사용됩니다.

**예시 (Python):**
```python
str = "aBcDe"
for char in str:
    print(char) # char 변수에 'a', 'B', 'c', 'D', 'e'가 차례로 할당됩니다.
```

### 2. 조건문 (경우에 따라 다르게 행동하기)

꺼내온 문자가 대문자인 경우와 소문자인 경우에 해야 할 일이 다릅니다. 이처럼 조건에 따라 코드를 분기할 때 `if`, `elif`, `else`를 사용합니다.

*   **if**: 만약 이 문자가 대문자라면?
*   **elif**: (대문자가 아니고) 만약 이 문자가 소문자라면?
*   **else**: 둘 다 아니라면? (이 문제에서는 알파벳만 다루므로 `else`는 `elif`로 충분합니다.)

### 3. 대소문자 판별 (정체 파악하기)

프로그래밍 언어는 문자가 대문자인지 소문자인지 쉽게 확인할 수 있는 기능을 제공합니다.

*   `islower()`: 소문자인지 확인 (맞으면 True, 아니면 False)
*   `isupper()`: 대문자인지 확인 (맞으면 True, 아니면 False)

**예시 (Python):**
```python
char1 = 'a'
char2 = 'B'

print(char1.islower()) # True 출력
print(char2.islower()) # False 출력

print(char1.isupper()) # False 출력
print(char2.isupper()) # True 출력
```

### 4. 대소문자 변환 (모습 바꾸기)

판별이 끝났으면 이제 변환을 해야 합니다. 이 또한 간단한 함수로 제공됩니다.

*   `lower()`: 모든 문자를 소문자로 변경
*   `upper()`: 모든 문자를 대문자로 변경

**예시 (Python):**
```python
char1 = 'a'
char2 = 'B'

print(char1.upper()) # 'A' 출력
print(char2.lower()) # 'b' 출력
```

---

### 종합: 문제 해결 과정

위 4가지 개념을 조합하면 문제를 다음과 같은 순서로 해결할 수 있습니다.

1.  결과를 저장할 빈 문자열을 하나 만든다. (예: `result = ""`)
2.  주어진 문자열 `str`의 문자를 **하나씩 순회한다.** ( `for` 반복문 사용)
3.  **만약** 현재 문자가 **소문자라면**, **대문자로 변환**해서 결과 문자열에 추가한다.
4.  **그렇지 않고 만약** 현재 문자가 **대문자라면**, **소문자로 변환**해서 결과 문자열에 추가한다.
5.  반복이 끝나면, 완성된 결과 문자열을 출력한다.

### 실제 코드 예시 (Python)

```python
str = "aBcDeFg"
result = "" # 1. 결과를 저장할 빈 문자열

# 2. str의 각 문자를 char라는 변수로 순회
for char in str:
    # 3. 만약 char가 소문자이면?
    if char.islower():
        # 대문자로 바꿔서 result에 이어붙이기
        result += char.upper()
    # 4. 그렇지 않고 만약 char가 대문자이면?
    elif char.isupper():
        # 소문자로 바꿔서 result에 이어붙이기
        result += char.lower()

# 5. 최종 결과 출력
print(result) # "AbCdEfG"가 출력됩니다.
```

### 심화 학습: 컴퓨터는 문자를 어떻게 이해할까요? (ASCII 코드)

조금 더 깊이 들어가면, 컴퓨터는 사실 'a'나 'A' 같은 문자를 직접 저장하지 않고 숫자로 바꿔서 저장합니다. 이 규칙을 **ASCII(아스키) 코드**라고 합니다.

*   'A'는 숫자 65
*   'B'는 숫자 66
*   ...
*   'a'는 숫자 97
*   'b'는 숫자 98

흥미롭게도, 모든 알파벳의 대문자와 소문자는 숫자 **32**만큼 차이가 납니다.
(예: 'a'(97) - 'A'(65) = 32)

그래서 과거에는 문자를 숫자로 바꾼 뒤 32를 더하거나 빼서 대소문자를 변환하기도 했습니다. 하지만 지금은 위에서 설명한 `upper()`, `lower()` 같은 내장 함수를 쓰는 것이 훨씬 안전하고 코드를 읽기에도 좋습니다.

**결론적으로, `for`, `if`, `isupper()`, `islower()`, `upper()`, `lower()` 이 개념들을 중심으로 공부하시면 이 문제를 완벽하게 이해하고 해결하실 수 있습니다!**


'''python
str = input()
str_arr = []
for char in str:
    if char.islower():
        str_arr.append(char.upper())
    else:
        str_arr.append(char.lower())

str_arr = ''.join(str_arr)
print(str_arr)

print(input().swapcase())
'''



9월 27일
https://school.programmers.co.kr/learn/courses/30/lessons/340207?language=python3
python에 문자열 처리 방법

https://school.programmers.co.kr/learn/courses/30/lessons/181952?language=python3
python에 기본적인 화면 표시 방법

https://school.programmers.co.kr/learn/courses/30/lessons/181951?language=python3
python에 if문과 print에 변수를 처리 하는 방법

https://school.programmers.co.kr/learn/courses/30/lessons/340203?language=python3
이중 반복문(Nested Loops)을 사용하여 문제를 해결하는 방식입니다. 이 코드를 완벽히 이해하기 위해서는 다음과 같은 Python 프로그래밍 개념들을 공부해야 합니다.

### 1. 리스트 (Lists)

코드는 `answer`, `basic_order`, `cpr` 이라는 세 개의 리스트를 사용합니다. 리스트에 대한 깊은 이해가 필수적입니다.

*   **리스트 생성:**
    *   `answer = []`: 비어있는 리스트를 만드는 방법.
    *   `basic_order = ["check", ..., "repeat"]`: 값을 포함한 리스트를 만드는 방법.
*   **리스트 길이 구하기:**
    *   `len(basic_order)`: 리스트에 몇 개의 항목(요소)이 들어있는지 확인하는 `len()` 함수.
*   **리스트 인덱싱 (Indexing):**
    *   `basic_order[i]`: 리스트의 특정 위치에 있는 값에 접근하는 방법. Python에서 인덱스는 **0부터 시작**한다는 점이 매우 중요합니다.
*   **리스트에 요소 추가하기:**
    *   `answer.append(i + 1)`: 리스트의 맨 끝에 새로운 값을 추가하는 `.append()` 메소드.

### 2. 반복문 (For Loops)

이 코드의 핵심 로직은 반복문, 특히 이중으로 중첩된 반복문으로 이루어져 있습니다.

*   **기본 `for` 반복문:**
    *   `for action in cpr:`: 리스트 `cpr`에 있는 모든 요소를 처음부터 끝까지 하나씩 순회합니다. `action`이라는 변수에 각 순회마다의 요소("call", "respiration" 등)가 담깁니다.
*   **`range()` 함수와 함께 사용하는 `for` 반복문:**
    *   `for i in range(len(basic_order)):`: `range(5)`는 0, 1, 2, 3, 4 숫자를 차례대로 생성합니다. 이 반복문은 변수 `i`에 0부터 4까지의 숫자를 차례대로 할당하며 반복합니다. 이 방식은 리스트의 **인덱스(위치 번호)**를 순회할 때 매우 유용합니다.
*   **이중 반복문 (Nested Loops):**
    *   바깥쪽 `for`문이 한 번 실행될 때, 안쪽 `for`문은 처음부터 끝까지 모두 실행되는 구조입니다. 이 코드에서는 `cpr` 리스트의 첫 번째 요소("call")에 대해 `basic_order` 리스트 전체를 탐색하고, 그 다음 두 번째 요소("respiration")에 대해 `basic_order` 리스트 전체를 다시 탐색하는 방식으로 동작합니다.

### 3. 조건문 (If Statements)

*   **`if action == basic_order[i]:`**
    *   `==` 연산자를 사용하여 두 값이 같은지 비교합니다.
    *   만약 `action` 변수에 담긴 값과 `basic_order[i]`의 값이 같다면, `if`문 아래의 들여쓰기 된 코드(`answer.append(i + 1)`)를 실행합니다.

### 4. 함수 (Functions)

*   **`def solution(cpr):`**: `solution`이라는 이름의 함수를 정의하는 부분입니다. `cpr`은 함수가 실행될 때 외부로부터 받아들이는 값(매개변수)입니다.
*   **`return answer`**: 함수의 실행을 마치고 최종 결과값인 `answer` 리스트를 반환하는 부분입니다.


### **학습 순서 추천**

1.  **기본 자료형과 변수:** 숫자, 문자열, 변수 선언 등 기초를 먼저 다집니다.
2.  **리스트:** 리스트를 만들고, 값을 추가하고, 특정 위치의 값을 읽어오는 방법을 익힙니다. (인덱싱, `append`)
3.  **`for` 반복문:** 리스트의 모든 요소를 순회하는 방법을 연습합니다.
4.  **`if` 조건문:** 특정 조건이 맞을 때만 코드를 실행하는 방법을 배웁니다.
5.  **`range()`와 `len()`:** `for` 반복문과 함께 사용하여 리스트의 인덱스를 기준으로 순회하는 방법을 익힙니다.
6.  **이중 반복문:** 반복문 안에 또 다른 반복문을 넣어 사용하는 방법을 이해합니다.
7.  **함수:** 코드의 묶음인 함수를 정의하고, 값을 받고, 결과를 반환하는 구조를 학습합니다.

https://school.programmers.co.kr/learn/courses/30/lessons/340204?language=python3
이 코드는 **문자열(String) 처리**와 **조건문(Conditional Statements)**을 중심으로 구성되어 있습니다. 이 두 가지 개념을 집중적으로 공부하시면 코드를 완벽하게 이해하고 빈칸을 채울 수 있습니다.

### 1. 변수와 입력/출력 (Variables and Input/Output)

가장 먼저 프로그램의 기본인 데이터를 저장하고, 사용자로부터 값을 받고, 결과를 화면에 보여주는 방법을 알아야 합니다.

*   **변수 (Variables):**
    *   `code = ...`, `last_four_words = ...` 와 같이 특정 값을 저장하는 공간입니다. 변수를 선언하고 값을 할당하는 방법을 공부해야 합니다.
*   **입력 함수 `input()`:**
    *   `code = input()`: 사용자로부터 키보드로 문자열을 입력받아 `code`라는 변수에 저장하는 역할을 합니다. `input()` 함수가 어떻게 동작하는지 알아야 합니다.
*   **출력 함수 `print()`:**
    *   `print("Ophthalmologyc")`: 괄호 안의 내용을 화면에 출력하는 역할을 합니다. 프로그램의 결과를 보여주기 위해 필수적인 함수입니다.

### 2. 문자열 슬라이싱 (String Slicing) - ⭐ 핵심 ⭐

이 문제의 가장 핵심적인 부분입니다. 전체 문자열에서 내가 원하는 부분만 잘라내는 기술입니다.

*   **`last_four_words = code[-4:]`**
    *   이 한 줄을 이해하는 것이 매우 중요합니다.
    *   **인덱싱 (Indexing):** Python 문자열은 각 글자에 번호(인덱스)가 매겨져 있습니다. 앞에서부터는 0, 1, 2, ... 순서이고, **뒤에서부터는 -1, -2, -3, ...** 순서입니다.
    *   **슬라이싱 (Slicing):** `[시작인덱스:끝인덱스]` 형태로 문자열의 일부를 잘라냅니다.
        *   `code[-4:]`의 의미는 "뒤에서 4번째 글자부터(`-4`) 끝까지(`:`) 잘라내라"는 뜻입니다.
    *   **학습 포인트:** Python에서 문자열의 특정 부분을 선택하는 슬라이싱 방법, 특히 음수(-) 인덱스를 사용하는 방법을 집중적으로 공부해야 합니다.

### 3. 조건문 (Conditional Statements)

특정 조건이 참(True)일 때만 특정 코드를 실행하도록 흐름을 제어하는 구문입니다.

*   **`if`, `elif`, `else`:**
    *   **`if`:** 가장 먼저 조건을 검사합니다. 조건이 참이면 `if` 아래의 코드를 실행하고 전체 조건문을 빠져나갑니다.
    *   **`elif`:** `if` 조건이 거짓일 경우, 그 다음 조건을 검사합니다. `elif`는 "else if"의 줄임말이며, 여러 개를 사용할 수 있습니다.
    *   **`else`:** 위의 `if`와 `elif`의 모든 조건이 거짓일 경우, 마지막으로 실행되는 코드 블록입니다. 이미지에서 빈칸으로 표시된 부분에 해당합니다.
*   **비교 연산자 `==`:**
    *   `last_four_words == "_eye"`: `==`는 왼쪽의 값과 오른쪽의 값이 **같은지** 비교하는 연산자입니다. 같으면 `True`, 다르면 `False`를 반환합니다.


### **학습 순서 추천**

1.  **Python 기본 입출력:** `input()`으로 값을 받고 `print()`로 출력하는 간단한 예제를 먼저 연습하세요.
2.  **문자열 자료형:** 문자열을 변수에 저장하고 다루는 법을 익힙니다.
3.  **문자열 슬라이싱:** **가장 중요합니다.** 문자열을 원하는 대로 자르는 연습을 많이 해보세요. 특히 `code[2:5]`, `code[:3]`, `code[-4:]` 등 다양한 경우를 테스트해보세요.
4.  **`if-elif-else` 조건문:** 여러 조건에 따라 다른 동작을 하는 프로그램을 만드는 연습을 합니다. 비교 연산자(`==`, `!=`, `>`, `<` 등)의 사용법도 함께 익히세요.


https://school.programmers.co.kr/learn/courses/30/lessons/340205?language=python3
안녕하세요! 제공된 이미지의 프로그래밍 문제를 해결하기 위해 어떤 공부를 해야 할지 질문해주셨네요. 이런 유형의 문제는 '디버깅(Debugging)' 문제로, 주어진 코드에서 잘못된 부분을 찾아 수정하는 능력을 요구합니다.

이 문제를 해결하고, 앞으로 비슷한 문제에 잘 대처하기 위해 공부해야 할 내용을 단계별로 알려드리겠습니다.

### 1단계: 프로그래밍 언어 기초 다지기 (Python)

*   **변수와 자료형**: `number`, `answer`와 같은 변수에 정수(`int`)를 저장하고 사용하는 방법을 알아야 합니다.
*   **입력과 출력**: `input()` 함수로 사용자로부터 값을 입력받고, `int()`를 통해 정수로 변환하는 과정, 그리고 `print()` 함수로 결과를 출력하는 방법을 이해해야 합니다.
*   **산술 연산자**: 이 문제의 핵심입니다. 특히 나머지 연산자(`%`)와 정수 나누기 연산자(`//`)의 작동 방식을 정확히 알아야 합니다.
    *   `number % 100`: 어떤 수를 100으로 나눈 나머지를 구합니다. 이는 숫자의 마지막 두 자리를 얻는 효과적인 방법입니다. (예: `1234 % 100`의 결과는 `34`입니다).
    *   `number //= 100`: `number = number // 100`과 같습니다. 숫자를 100으로 나눈 몫만 남겨 마지막 두 자리를 제거하는 역할을 합니다. (예: `1234 // 100`의 결과는 `12`입니다).
*   **반복문 (`for`, `while`)**: 코드의 특정 부분을 반복적으로 실행하는 방법을 알아야 합니다.
    *   **`for` 루프**: 정해진 횟수만큼 반복할 때 주로 사용됩니다. 코드에서는 `range()` 함수와 함께 쓰여 숫자의 자릿수 길이에 따라 반복 횟수를 정하고 있습니다.
    *   **`while` 루프**: 특정 조건이 만족되는 동안 계속해서 반복할 때 사용됩니다. 숫자가 0보다 클 동안 계속 반복하는 식으로 활용할 수 있습니다.

### 2단계: 알고리즘적 사고 능력 기르기

프로그래밍은 단순히 문법을 아는 것을 넘어, 문제 해결을 위한 논리적인 절차(알고리즘)를 생각하는 과정입니다.

*   **문제 분해**: "주어진 수를 2자리씩 잘라 모두 더한다"는 요구사항을 프로그래밍 단계로 나눌 수 있어야 합니다.
    1.  합계를 저장할 변수(`answer`)를 0으로 만든다.
    2.  숫자의 마지막 두 자리를 구한다.
    3.  구한 두 자릿수를 `answer`에 더한다.
    4.  숫자에서 마지막 두 자리를 없앤다.
    5.  원래 숫자가 0이 될 때까지 2~4번 과정을 반복한다.
    6.  최종 `answer`를 출력한다.

*   **핵심 패턴 익히기**: 숫자의 각 자릿수를 다루는 문제에서는 '나머지(%)'와 '나누기(/, //)' 연산자를 반복적으로 사용하는 것이 매우 흔한 패턴입니다. 이 패턴을 익혀두면 비슷한 문제에 쉽게 적용할 수 있습니다.

### 3단계: 디버깅 능력 향상시키기

버그(오류)를 찾고 수정하는 능력은 모든 개발자에게 필수적입니다.

*   **코드 추적 (Code Tracing)**: 코드가 한 줄씩 실행될 때마다 각 변수의 값이 어떻게 변하는지 손으로 직접 써보는 연습입니다. 예를 들어, `number`가 `1234`일 때, 반복문이 돌면서 `answer`와 `number`의 값이 어떻게 변하는지 따라가 보는 것입니다.

    | 단계 | `i` | `number` (시작) | `number % 100` | `answer` | `number` (끝) |
    | :--- | :-- | :--- | :--- | :--- | :--- |
    | **시작** | | `1234` | | `0` | |
    | **1회차**| `0` | `1234` | `34` | `34` | `12` |
    | **2회차**| `1` | `12` | `12` | `46` | `0` |

*   **논리적 오류 찾기**: 문법적으로는 맞지만, 문제의 요구사항과 다르게 동작하는 부분을 찾는 연습입니다. 이 문제의 경우, `for` 반복문이 주어진 조건에서는 잘 동작하는 것처럼 보입니다. 하지만 숫자를 처리해서 0으로 만들어가는 알고리즘의 본질을 생각해보면, "숫자가 0보다 클 동안" 계속 반복하는 `while` 문이 더 직관적이고 일반적인 해결책입니다. 디버깅 문제에서는 이처럼 "더 나은" 또는 "더 올바른" 논리 구조를 찾는 것을 요구하기도 합니다.

### 이 문제의 분석과 해결

1.  **코드의 의도**: `number % 100`으로 마지막 두 자리를 구해서 `answer`에 더하고, `number //= 100`으로 그 두 자리를 없애는 것을 반복합니다. 이 로직 자체는 올바릅니다.
2.  **문제점**: 5번 줄의 `for i in range(len(str(number)) // 2):` 부분입니다. 이 코드는 반복 횟수를 "최초 `number`의 길이"를 기준으로 미리 계산합니다. 이 방식도 현재 문제의 제약 조건 하에서는 답을 맞힐 수 있지만, 알고리즘의 핵심(숫자가 0이 될 때까지)을 직접적으로 표현하지는 않습니다.
3.  **수정 제안**: 이런 종류의 숫자 처리 알고리즘에는 `for`문보다 `while`문을 사용하는 것이 더 일반적이고 명확합니다. 5번 줄을 다음과 같이 수정하면 코드가 더 직관적이고 안정적으로 변합니다.

    *   **기존 코드:** `for i in range(len(str(number)) // 2):`
    *   **수정 코드:** `while number > 0:`

    이렇게 바꾸면 `number`의 값 자체가 반복의 조건이 되므로, "숫자가 0보다 큰 동안에는 계속 마지막 두 자리를 떼어 더한다"는 알고리즘의 핵심 로직을 코드가 그대로 보여주게 됩니다.

### 요약: 공부 방법 추천

1.  **파이썬 기초**: 변수, 자료형, 연산자(특히 `%`, `//`), 반복문(`for`, `while`)을 책이나 온라인 강의(프로그래머스, 코드잇 등)를 통해 학습하세요.
2.  **알고리즘 문제 풀이**: 백준, 프로그래머스 같은 사이트에서 쉬운 단계의 문제부터 0차근차근 풀어보세요. 특히, 숫자의 자릿수를 다루는 문제를 집중적으로 풀어보며 패턴을 익히는 것이 좋습니다.
3.  **디버깅 연습**: 다른 사람의 코드를 분석하거나, 일부러 틀린 코드를 주고 어디가 문제인지 찾아보는 연습을 해보세요. 변수 값의 변화를 추적하는 것이 가장 중요합니다.

https://school.programmers.co.kr/learn/courses/30/lessons/340206?language=python3

### 1. 파이썬(Python) 기본 문법

우선 파이썬이라는 프로그래밍 언어의 기본적인 문법을 알아야 합니다.

*   **변수 (Variables):** `angle1`, `angle2`, `sum_angle`와 같이 데이터를 저장하는 공간에 대한 이해가 필요합니다.
*   **입력 (Input):** `input()` 함수를 사용하여 사용자로부터 값을 입력받는 방법을 알아야 합니다.
*   **데이터 타입 (Data Types):** `int()` 함수는 입력받은 문자열을 정수(integer)로 변환하는 역할을 합니다. 이처럼 파이썬의 여러 데이터 타입(정수, 실수, 문자열 등)에 대한 이해가 필요합니다.
*   **출력 (Output):** `print()` 함수를 사용하여 결과를 화면에 출력하는 방법을 알아야 합니다.

### 2. 산술 연산자 (Arithmetic Operators)

문제의 핵심은 두 각의 합을 구하고 특정 범위의 값으로 만드는 것입니다. 이를 위해 다음과 같은 산술 연산자에 대한 학습이 필요합니다.

*   **덧셈 연산자 (`+`):** 두 변수 `angle1`과 `angle2`를 더하는 데 사용됩니다.
*   **나머지 연산자 (Modulo Operator, `%`):** 이 문제의 핵심입니다. 나머지 연산자는 한 숫자를 다른 숫자로 나눈 후 남은 나머지를 구하는 연산자입니다. 예를 들어, `10 % 3`은 10을 3으로 나눈 나머지인 1이 됩니다. 문제에서 두 각의 합을 360으로 나눈 나머지를 구하면 그 결과는 항상 0 이상 360 미만의 값이 되므로, 각도를 표현하는 데 유용하게 사용됩니다.

### 3. 문제 해결 능력 (Problem Solving)

제시된 문제의 요구사항을 이해하고, 이를 코드로 어떻게 구현할지 논리적으로 생각하는 능력이 필요합니다.

*   **요구사항 분석:** "두 각의 합을 0도 이상 360도 미만으로 출력"이라는 요구사항을 정확히 이해해야 합니다.
*   **디버깅 (Debugging):** 주어진 코드에서 어떤 부분이 잘못되었는지 찾아내고 수정하는 능력입니다. 문제에서 주어진 코드는 `(angle1 + angle2) % 360`으로 이미 올바르게 수정된 상태이지만, 원래 코드의 버그를 찾고 해결하는 연습이 중요합니다.

**결론적으로,** 이 문제를 해결하기 위해서는 **파이썬 기초 문법**, 특히 **변수, 입출력, 데이터 타입**에 대한 이해와 **나머지 연산자(`%`)**의 개념 및 활용법을 중점적으로 공부해야 합니다.

9월 29일
https://school.programmers.co.kr/learn/courses/30/lessons/250133?language=python3
python에 문자열(string)과 숫자열(int) 처리 방법 
